// datasource and generator setup
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ---------------------------------------------------------
//  ENUMS
// ---------------------------------------------------------

enum UserRole {
  USER
  BUSINESS_PARTNER
  ADMIN
  SUPER_ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

enum EveryServiceStatus {
  AVAILABLE
  BOOKED
}

enum PaymentStatus {
  SUCCESS
  PENDING
  FAILED
}

enum Weekday {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

enum PaymentProvider {
  STRIPE
}

// ---------------------------------------------------------
//  MODEL
// ---------------------------------------------------------

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  fullName      String?
  email         String     @unique
  password      String
  profileImage  String     @default("https://i.ibb.co/Ps9gZ8DD/Profile-image.png")
  contactNumber String?
  address       String?
  country       String?
  role          UserRole   @default(USER)
  status        UserStatus @default(ACTIVE)

  // add for stripe integration
  stripeCustomerId String?

  otp        String?
  otpExpiry  DateTime?
  identifier String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relationships
  payment           Payment[]
  notification      Notification[]
  hotel             Hotel[]
  review            Review[]
  hotel_bookings    Hotel_Booking[]
  favorite          Favorite[]
  security_Protocol Security_Protocol[]
  security_Booking  Security_Booking[]

  @@map("users")
}

model Admin {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  fullName    String?
  phoneNumber String?
  email       String  @unique
  password    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admins")
}

model Hotel {
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  hotelBusinessName String @unique
  hotelName         String
  hotelBusinessType String
  hotelRegNum       String
  hotelRegDate      String
  hotelPhone        String
  hotelEmail        String

  businessTagline     String
  businessDescription String
  businessLogo        String @default("https://i.ibb.co/zWxSgQL8/download.png")

  hotelRoomType       String
  hotelRoomPriceNight Int // price  float korte hobe

  hotelAC        Boolean
  hotelParking   Boolean
  hoitelWifi     Boolean
  hotelBreakfast Boolean
  hotelPool      Boolean

  hotelRating String

  hotelSmoking Boolean
  hotelTv      Boolean
  hotelWashing Boolean

  hotelBookingCondition  String
  hotelCancelationPolicy String
  hotelDocs              String[]
  hotelRoomDescription   String
  hotelAddress           String
  hotelCity              String
  hotelPostalCode        String
  hotelDistrict          String
  hotelCountry           String
  hotelRoomImages        String[] // 5 image
  hotelRoomCapacity      String

  category String?
  discount Float?
  isBooked EveryServiceStatus @default(AVAILABLE)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relationships
  user           User            @relation(fields: [partnerId], references: [id])
  partnerId      String          @db.ObjectId
  hotel_bookings Hotel_Booking[]
  review         Review[]
  favorite       Favorite[]

  @@map("hotels")
}

model Hotel_Booking {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  rooms          Int
  adults         Int
  children       Int
  bookedFromDate String
  bookedToDate   String
  totalPrice     Float
  bookingStatus  BookingStatus @default(PENDING)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  // relationships
  partnerId String @db.ObjectId
  hotel     Hotel  @relation(fields: [hotelId], references: [id])
  hotelId   String @db.ObjectId
  user      User   @relation(fields: [userId], references: [id])
  userId    String @db.ObjectId

  @@map("hotel_bookings")
}

model Security_Protocol {
  id                   String @id @default(auto()) @map("_id") @db.ObjectId
  securityBusinessName String @unique
  securityName         String
  securityBusinessType String
  securityRegNum       String
  securityRegDate      String
  securityPhone        String
  securityEmail        String

  securityAddress           String
  securityCity              String
  securityPostalCode        String
  securityDistrict          String
  securityCountry           String
  securityDescription       String
  securityImages            String[] // 5 image
  securityServicesOffered   String[]
  securityBookingCondition  String
  securityCancelationPolicy String
  securityDocs              String[] // 5 image

  securityRating   String
  securityPriceDay Int

  category   String?
  discount   Float?
  isBooked   EveryServiceStatus @default(AVAILABLE)
  hiredCount Int                @default(0)
  vat                Float         @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relationships
  user             User               @relation(fields: [partnerId], references: [id])
  partnerId        String             @db.ObjectId
  securitySchedule SecuritySchedule[]
  security_Booking Security_Booking[]
  // review         Review[]
  // favorite       Favorite[]

  @@map("security_protocols")
}

model SecuritySchedule {
  id                 String            @id @default(auto()) @map("_id") @db.ObjectId
  day                Weekday
  securityProtocolId String            @db.ObjectId
  securityProtocol   Security_Protocol @relation(fields: [securityProtocolId], references: [id])

  // relationships
  slots ScheduleSlot[]

  @@map("security_schedules")
}

model ScheduleSlot {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  from String // "10:00:00"
  to   String // "12:00:00"

  // relationships
  securityScheduleId String           @db.ObjectId
  weeklySchedule     SecuritySchedule @relation(fields: [securityScheduleId], references: [id])

  @@map("schedule_slots")
}

model Security_Booking {
  id                 String        @id @default(auto()) @map("_id") @db.ObjectId
  number_of_security Int
  bookedFromDate     String
  bookedToDate       String
  totalPrice         Float
  bookingStatus      BookingStatus @default(PENDING)
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt

  // relationships
  partnerId String @db.ObjectId
  security   Security_Protocol @relation(fields: [securityId], references: [id])
  securityId String            @db.ObjectId
  user       User              @relation(fields: [userId], references: [id])
  userId     String            @db.ObjectId

  @@map("security_bookings")
}

model Personal_details {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  dateOfBirth      String
  description      String
  image            String
  offered_services String[]
  category         String
  email            String?
  contactNo        String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("personal_details")
}

model Car_Rental {
  id                   String @id @default(auto()) @map("_id") @db.ObjectId
  carBusinessName      String @unique
  carName              String
  carBusinessType      String
  carRegNum            String
  carRegDate           String
  carPhone             String
  carEmail             String
  carAddress           String
  carCity              String
  carPostalCode        String
  carDistrict          String
  carCountry           String
  carDescription       String
  carImages            String[] // 5 image

  carServicesOffered   String[]
  carBookingCondition  String
  carCancelationPolicy String
  carDocs              String[] // 5 image

  carModel String
  carCapacity String
  carColor String
  fuelType String
  gearType String

  carRating   String
  carPriceDay Int

  category   String?
  discount   Float?
  isBooked   EveryServiceStatus @default(AVAILABLE)
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  rating    Float
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relationships
  hotel   Hotel  @relation(fields: [hotelId], references: [id])
  hotelId String @db.ObjectId
  user    User   @relation(fields: [userId], references: [id])
  userId  String @db.ObjectId

  @@map("reviews")
}

model Favorite {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  hotel     Hotel    @relation(fields: [hotelId], references: [id])
  hotelId   String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, hotelId])
  @@map("favorites")
}

model Notification {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  receiverId Int
  viewed     Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relationships
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  @@map("notifications")
}

model Payment {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  amount          Float
  currency        String          @default("USD")
  status          PaymentStatus
  provider        PaymentProvider
  paymentIntentId String? // Stripe payment intent ID
  stripeSessionId String?         @unique
  // userId          String?         @db.ObjectId 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relationships
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  @@map("payments")
}

model Terms_Condition {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  title                 String
  acceptance_terms      String
  app_purpose           String
  user_responsibilities String
  data_usage            String
  intellectual_property String
  limitation            String
  updates               String
  contactUS             String
  adminId               String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("terms_conditions")
}

model Privacy_Policy {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  title                String
  introduction         String
  information_collect  String[]
  how_useYour_data     String[]
  data_security        String
  third_party_services String
  user_control         String[]
  children_privacy     String
  changes_to_policy    String
  contact_info         String
  adminId              String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("privacy_policies")
}
