// datasource and generator setup
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ---------------------------------------------------------
//  ENUMS
// ---------------------------------------------------------

enum UserRole {
  USER
  BUSINESS_PARTNER
  ADMIN
  SUPER_ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  REJECTED
}

enum EveryServiceStatus {
  AVAILABLE
  BOOKED
}

enum PaymentStatus {
  PAID
  UNPAID
  REFUNDED
}

enum Weekday {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

enum PaymentProvider {
  STRIPE
  PAYSTACK
}

enum PromoStatus {
  ACTIVE
  INACTIVE
  EXPIRED
}

enum DiscountType {
  PERCENTAGE
  FLAT
}

// ---------------------------------------------------------
//  MODEL
// ---------------------------------------------------------

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  fullName      String?
  email         String     @unique
  password      String
  profileImage  String     @default("https://i.ibb.co/Ps9gZ8DD/Profile-image.png")
  contactNumber String?
  address       String?
  country       String?
  role          UserRole   @default(USER)
  status        UserStatus @default(ACTIVE)
  fcmToken      String?    @default("")

  // Stripe
  stripeAccountId   String?
  isStripeConnected Boolean @default(false)

  // Pay-stack
  payStackMerchantId  String?
  isPayStackConnected Boolean @default(false)

  // Sub-account info for pay-stack
  payStackSubAccountId String?
  payStackSubAccount   String?

  otp        String?
  otpExpiry  DateTime?
  identifier String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relationships
  payment            Payment[]
  notifications      Notifications[]
  hotel              Hotel[]
  review             Review[]
  hotel_bookings     Hotel_Booking[]
  favorite           Favorite[]
  security_Protocol  Security_Protocol[]
  security_Booking   Security_Booking[]
  car_Rental         Car_Rental[]
  car_Booking        Car_Booking[]
  attraction         Attraction[]
  attraction_Booking Attraction_Booking[]
  sender             Channel[]            @relation("ChannelPerson1")
  receiver           Channel[]            @relation("ChannelPerson2")
  messages           Message[]            @relation("sentMessages")

  @@map("users")
}

model Admin {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  fullName    String?
  phoneNumber String?
  email       String  @unique
  password    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admins")
}

model Hotel {
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  hotelBusinessName String @unique
  hotelName         String
  hotelBusinessType String
  hotelRegNum       String
  hotelRegDate      String
  hotelPhone        String
  hotelEmail        String

  businessTagline     String
  businessDescription String
  businessLogo        String // @default("https://i.ibb.co/zWxSgQL8/download.png")

  hotelRoomType       String
  hotelRoomPriceNight Int // price  float korte hobe

  hotelAC        Boolean
  hotelParking   Boolean
  hoitelWifi     Boolean
  hotelBreakfast Boolean
  hotelPool      Boolean

  hotelRating String

  hotelSmoking Boolean
  hotelTv      Boolean
  hotelWashing Boolean

  hotelBookingCondition  String
  hotelCancelationPolicy String
  hotelDocs              String[]
  hotelRoomDescription   String
  hotelAddress           String
  hotelCity              String
  hotelPostalCode        String
  hotelDistrict          String
  hotelCountry           String
  hotelRoomImages        String[] // 5 image
  hotelRoomCapacity      String
  hotelNumberOfRooms     Int
  hotelNumAdults         Int
  hotelNumChildren       Int

  category         String?
  discount         Float?             @default(0)
  isBooked         EveryServiceStatus @default(AVAILABLE)
  hotelReviewCount Int                @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relationships
  user           User            @relation(fields: [partnerId], references: [id])
  partnerId      String          @db.ObjectId
  hotel_bookings Hotel_Booking[]
  review         Review[]
  favorite       Favorite[]

  @@map("hotels")
}

model Hotel_Booking {
  id                String        @id @default(auto()) @map("_id") @db.ObjectId
  checkoutSessionId String?
  rooms             Int
  adults            Int
  children          Int
  bookedFromDate    String
  bookedToDate      String
  totalPrice        Float
  bookingStatus     BookingStatus @default(PENDING)
  category          String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  // relationships
  partnerId String    @db.ObjectId
  hotel     Hotel     @relation(fields: [hotelId], references: [id])
  hotelId   String    @db.ObjectId
  user      User?     @relation(fields: [userId], references: [id])
  userId    String?   @db.ObjectId
  payment   Payment[]

  @@map("hotel_bookings")
}

model Security_Protocol {
  id                   String @id @default(auto()) @map("_id") @db.ObjectId
  securityBusinessName String @unique
  securityName         String
  securityBusinessType String
  securityRegNum       String
  securityRegDate      String
  securityPhone        String
  securityEmail        String

  securityAddress           String
  securityCity              String
  securityPostalCode        String
  securityDistrict          String
  securityCountry           String
  securityDescription       String
  securityImages            String[] // 5 image
  securityServicesOffered   String[]
  securityBookingCondition  String
  securityCancelationPolicy String
  securityDocs              String[] // 5 image

  securityRating   String
  securityPriceDay Int

  category                String?
  discount                Float?
  isBooked                EveryServiceStatus @default(AVAILABLE)
  hiredCount              Int                @default(0)
  vat                     Float              @default(0)
  securityReviewCount     Int                @default(0)
  securityBookingAbleDays String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relationships
  user             User               @relation(fields: [partnerId], references: [id])
  partnerId        String             @db.ObjectId
  // securitySchedule SecuritySchedule[]
  security_Booking Security_Booking[]
  review           Review[]

  @@map("security_protocols")
}

model Security_Booking {
  id                     String        @id @default(auto()) @map("_id") @db.ObjectId
  checkoutSessionId      String?
  number_of_security     Int
  securityBookedFromDate String
  securityBookedToDate   String
  totalPrice             Float
  bookingStatus          BookingStatus @default(PENDING)
  category               String
  createdAt              DateTime      @default(now())
  updatedAt              DateTime      @updatedAt

  // relationships
  partnerId  String            @db.ObjectId
  security   Security_Protocol @relation(fields: [securityId], references: [id])
  securityId String            @db.ObjectId
  user       User?             @relation(fields: [userId], references: [id])
  userId     String?           @db.ObjectId
  payment    Payment[]

  @@map("security_bookings")
}

model Car_Rental {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  carBusinessName String   @unique
  carName         String
  carBusinessType String
  carRegNum       String
  carRegDate      String
  carPhone        String
  carEmail        String
  carAddress      String
  carCity         String
  carPostalCode   String
  carDistrict     String
  carCountry      String
  carDescription  String
  carImages       String[] // 5 image

  carServicesOffered   String[]
  carBookingCondition  String
  carCancelationPolicy String
  carDocs              String[] // 5 image

  carType    String
  carSeats   String
  carOilType String

  carEngineType   String
  carTransmission String
  carPower        String
  carDrivetrain   String
  carMileage      String

  carModel    String
  carCapacity String
  carColor    String
  fuelType    String
  gearType    String

  carRating          String
  carPriceDay        Int
  carBookingAbleDays String[]

  category       String?
  discount       Float?
  isBooked       EveryServiceStatus @default(AVAILABLE)
  vat            Float              @default(0)
  carReviewCount Int                @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relationships
  user        User          @relation(fields: [partnerId], references: [id])
  partnerId   String        @db.ObjectId
  car_Booking Car_Booking[]
  review      Review[]

  @@map("car_rentals")
}

model PromoCode {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  code          String       @unique
  discountType  DiscountType @default(PERCENTAGE) // PERCENTAGE | FLAT
  discountValue Float

  validFrom     DateTime
  validTo       DateTime
  usageLimit    Int
  usedCount     Int      @default(0)
  perUserLimit  Int
  minimumAmount Float? // minimum order amount

  status PromoStatus @default(ACTIVE)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relationships
  carBookings Car_Booking[]

  @@map("promo_codes")
}

model Car_Booking {
  id                String        @id @default(auto()) @map("_id") @db.ObjectId
  checkoutSessionId String?
  carBookedFromDate String
  carBookedToDate   String
  promo_code        String?
  totalPrice        Float
  bookingStatus     BookingStatus @default(PENDING)
  category          String
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  // relationships
  partnerId   String     @db.ObjectId
  car         Car_Rental @relation(fields: [carId], references: [id])
  carId       String     @db.ObjectId
  user        User?      @relation(fields: [userId], references: [id])
  userId      String?    @db.ObjectId
  promoCode   PromoCode? @relation(fields: [promoCodeId], references: [id])
  promoCodeId String?    @db.ObjectId
  payment     Payment[]

  @@map("car_bookings")
}

model Attraction {
  id                     String @id @default(auto()) @map("_id") @db.ObjectId
  attractionBusinessName String @unique
  attractionName         String
  attractionBusinessType String
  attractionRegNum       String
  attractionRegDate      String

  attractionBusinessTagline     String
  attractionBusinessDescription String
  attractionBusinessLogo        String // 1 image
  attractionBookingCondition    String
  attractionCancelationPolicy   String
  attractionDocs                String[] // 5 image

  attractionServicesOffered String[]
  attractionRating          String
  attractionDestinationType String
  attractionAdultPrice      Int
  attractionChildPrice      Int
  attractionDescription     String
  attractionPhone           String
  attractionEmail           String
  attractionAddress         String
  attractionCity            String
  attractionPostalCode      String
  attractionDistrict        String
  attractionCountry         String
  attractionImages          String[] // 5 image

  category              String?
  discount              Float?
  isBooked              EveryServiceStatus @default(AVAILABLE)
  vat                   Float              @default(0)
  attractionReviewCount Int                @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relationships
  user               User?                @relation(fields: [partnerId], references: [id])
  partnerId          String?              @db.ObjectId
  attraction_Booking Attraction_Booking[]
  review             Review[]
  attractionSchedule AttractionSchedule[]
  scheduleSlot       ScheduleSlot[]

  @@map("attractions")
}

model AttractionSchedule {
  id  String @id @default(auto()) @map("_id") @db.ObjectId
  day String
  // date String

  // relationships
  attractionId String         @db.ObjectId
  attraction   Attraction     @relation(fields: [attractionId], references: [id])
  slots        ScheduleSlot[]

  @@map("attraction_schedules")
}

model ScheduleSlot {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  from String // "10:00:00"
  to   String // "12:00:00"

  // relationships
  attractionId         String             @db.ObjectId
  attraction           Attraction         @relation(fields: [attractionId], references: [id])
  attractionScheduleId String             @db.ObjectId
  weeklySchedule       AttractionSchedule @relation(fields: [attractionScheduleId], references: [id])

  @@map("schedule_slots")
}

model Attraction_Booking {
  id                String        @id @default(auto()) @map("_id") @db.ObjectId
  checkoutSessionId String?
  totalPrice        Float
  bookingStatus     BookingStatus @default(PENDING)
  adults            Int
  children          Int
  date              String
  day               String
  timeSlot          Json // { "from": "10:00:00", "to": "12:00:00" }
  category          String
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  // relationships
  partnerId    String     @db.ObjectId
  attraction   Attraction @relation(fields: [attractionId], references: [id])
  attractionId String     @db.ObjectId
  user         User?      @relation(fields: [userId], references: [id])
  userId       String?    @db.ObjectId
  payment      Payment[]

  @@map("attraction_bookings")
}

model Review {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  rating     Float
  subRatings Json?
  comment    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // relationships
  hotel        Hotel?             @relation(fields: [hotelId], references: [id])
  hotelId      String?            @db.ObjectId
  user         User               @relation(fields: [userId], references: [id])
  userId       String             @db.ObjectId
  security     Security_Protocol? @relation(fields: [securityId], references: [id])
  securityId   String?            @db.ObjectId
  car_Rental   Car_Rental?        @relation(fields: [carId], references: [id])
  carId        String?            @db.ObjectId
  attraction   Attraction?        @relation(fields: [attractionId], references: [id])
  attractionId String?            @db.ObjectId

  @@map("reviews")
}

model Favorite {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  hotel     Hotel    @relation(fields: [hotelId], references: [id])
  hotelId   String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, hotelId])
  @@map("favorites")
}

model Notifications {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  receiverId   String?  @db.ObjectId
  partnerId    String?  @db.ObjectId
  title        String
  message      String?
  body         String
  serviceTypes String?
  bookingId    String?
  read         Boolean  @default(false)
  isClicked    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User?    @relation(fields: [receiverId], references: [id])

  @@map("notifications")
}

model CustomerContact {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  email String
  phone String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("customer_contacts")
}

model About_App {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  appName       String
  description   String
  ourServices   String[]
  whyFasisty    String[]
  ourMission    String
  ourVision     String
  securityTrust String
  futurePlans   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("about_apps")
}

model Terms_Condition {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  title                 String
  acceptance_terms      String
  app_purpose           String
  user_responsibilities String
  data_usage            String
  intellectual_property String
  limitation            String
  updates               String
  contactUS             String
  adminId               String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("terms_conditions")
}

model Privacy_Policy {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  title                String
  introduction         String
  information_collect  String[]
  how_useYour_data     String[]
  data_security        String
  third_party_services String
  user_control         String[]
  children_privacy     String
  changes_to_policy    String
  contact_info         String
  adminId              String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("privacy_policies")
}

model Channel {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  channelName String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  //Relations
  person1Id String?   @db.ObjectId
  person1   User?     @relation("ChannelPerson1", fields: [person1Id], references: [id])
  person2Id String?   @db.ObjectId
  person2   User?     @relation("ChannelPerson2", fields: [person2Id], references: [id])
  messages  Message[]

  @@map("channels")
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  message   String?
  files     String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  senderId    String   @db.ObjectId
  sender      User     @relation("sentMessages", fields: [senderId], references: [id])
  channelName String
  Channel     Channel? @relation(fields: [channelName], references: [channelName])

  @@map("messages")
}

model Payment {
  id               String          @id @default(auto()) @map("_id") @db.ObjectId
  amount           Float
  description      String?
  currency         String?
  sessionId        String?
  paymentMethod    String?
  status           PaymentStatus
  provider         PaymentProvider
  payable_name     String?
  payable_email    String?
  payment_intent   String?
  country          String?
  admin_commission Float?
  service_fee      Float?
  paystack_fee     Float?
  transactionId    String?
  serviceType      String // HOTEL | SECURITY | CAR | ATTRACTION
  partnerId        String          @db.ObjectId
  isDeleted        Boolean         @default(false)
  metadata         Json? // extra(fullName, email, contactNumber, country, description etc).

  // Relations
  user                 User                @relation(fields: [userId], references: [id])
  userId               String              @db.ObjectId
  hotel_booking        Hotel_Booking?      @relation(fields: [hotel_bookingId], references: [id])
  hotel_bookingId      String?             @db.ObjectId
  security_booking     Security_Booking?   @relation(fields: [security_bookingId], references: [id])
  security_bookingId   String?             @db.ObjectId
  car_booking          Car_Booking?        @relation(fields: [car_bookingId], references: [id])
  car_bookingId        String?             @db.ObjectId
  attraction_booking   Attraction_Booking? @relation(fields: [attraction_bookingId], references: [id])
  attraction_bookingId String?             @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("payments")
}
