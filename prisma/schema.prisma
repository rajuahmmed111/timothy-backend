// datasource and generator setup
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ---------------------------------------------------------
//  ENUMS
// ---------------------------------------------------------

enum UserRole {
  USER
  BUSINESS_PARTNER
  ADMIN
  SUPER_ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  REJECTED
}

enum EveryServiceStatus {
  AVAILABLE
  BOOKED
}

enum PaymentStatus {
  PAID
  UNPAID
  REFUNDED
}

enum Weekday {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum PaymentProvider {
  STRIPE
  PAYSTACK
}

enum PromoStatus {
  ACTIVE
  INACTIVE
  EXPIRED
}

enum DiscountType {
  PERCENTAGE
  FLAT
}

enum SupportType {
  Critical
  High
  Medium
  Low
}

enum SupportStatus {
  Pending
  Closed
}

// ---------------------------------------------------------
//  MODEL
// ---------------------------------------------------------

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  fullName        String?
  email           String     @unique
  password        String
  profileImage    String     @default("https://i.ibb.co/Ps9gZ8DD/Profile-image.png")
  contactNumber   String?
  address         String?
  country         String?
  role            UserRole   @default(USER)
  status          UserStatus @default(ACTIVE)
  fcmToken        String?    @default("")
  age             Int?
  dateOfBirth     DateTime?
  profession      String?
  gender          String?
  companyName     String?
  isEmailVerified Boolean    @default(false)
  isPhoneVerified Boolean    @default(false)

  // Stripe
  stripeAccountId   String?
  isStripeConnected Boolean @default(false)

  // Pay-stack
  payStackMerchantId  String?
  isPayStackConnected Boolean @default(false)

  // Sub-account info for pay-stack
  payStackSubAccountId String?
  payStackSubAccount   String?

  // notification Preferences
  supportNotification Boolean @default(true)
  paymentNotification Boolean @default(true)
  emailNotification   Boolean @default(true)

  isHotel      Boolean @default(false)
  isSecurity   Boolean @default(false)
  isCar        Boolean @default(false)
  isAttraction Boolean @default(false)

  otp        String?
  otpExpiry  DateTime?
  identifier String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relationships
  payment            Payment[]
  notifications      Notifications[]
  hotel              Hotel[]
  room               Room[]
  review             Review[]
  hotel_bookings     Hotel_Booking[]
  favorite           Favorite[]
  security_Protocol  Security_Protocol[]
  security_Guard     Security_Guard[]
  security_Booking   Security_Booking[]
  car_Rental         Car_Rental[]
  car                Car[]
  car_Booking        Car_Booking[]
  attraction         Attraction[]
  appeal             Appeal[]
  attraction_Booking Attraction_Booking[]
  sender             Channel[]            @relation("ChannelPerson1")
  receiver           Channel[]            @relation("ChannelPerson2")
  messages           Message[]            @relation("sentMessages")
  support            Support[]

  @@map("users")
}

model Admin {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  fullName    String?
  phoneNumber String?
  email       String  @unique
  password    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admins")
}

model Hotel {
  id                     String   @id @default(auto()) @map("_id") @db.ObjectId
  hotelBusinessName      String   @unique
  hotelName              String
  hotelBusinessType      String
  hotelRegNum            String
  hotelRegDate           String
  hotelPhone             String
  hotelEmail             String
  businessTagline        String
  businessDescription    String
  businessLogo           String // @default("https://i.ibb.co/zWxSgQL8/download.png")
  hotelBookingCondition  String
  hotelCancelationPolicy String
  hotelDocs              String[]
  hotelLate              Float?
  hotelLong              Float?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  // relationships
  user           User            @relation(fields: [partnerId], references: [id])
  partnerId      String          @db.ObjectId
  hotel_bookings Hotel_Booking[]
  favorite       Favorite[]
  room           Room[]

  @@map("hotels")
}

model Room {
  id                            String             @id @default(auto()) @map("_id") @db.ObjectId
  hotelRoomType                 String
  hotelAC                       Boolean
  hotelParking                  Boolean
  hoitelWifi                    Boolean
  hotelBreakfast                Boolean
  hotelPool                     Boolean
  hotelRating                   String
  hotelSmoking                  Boolean
  hotelTv                       Boolean
  hotelWashing                  Boolean
  hotelRoomDescription          String
  hotelAddress                  String
  hotelCity                     String
  hotelPostalCode               String
  hotelDistrict                 String
  hotelCountry                  String
  hotelImages                   String[] // 5 image
  hotelRoomImages               String[] // 5 image
  hotelRoomCapacity             String
  hotelNumberOfRooms            Int
  hotelNumAdults                Int
  hotelNumChildren              Int
  hotelAccommodationType        String
  hotelKitchen                  Boolean
  hotelRestaurant               Boolean
  hotelGym                      Boolean
  hotelSpa                      Boolean
  hotel24HourFrontDesk          Boolean
  hotelAirportShuttle           Boolean
  hotelNoSmokingPreference      Boolean
  hotelNoNSmoking               Boolean
  hotelPetsAllowed              Boolean
  hotelNoPetsPreferences        Boolean
  hotelPetsNotAllowed           Boolean
  hotelLocationFeatureWaterView Boolean
  hotelLocationFeatureIsland    Boolean
  hotelCoffeeBar                Boolean
  category                      String
  hotelRoomPriceNight           Float
  discount                      Float              @default(0)
  isBooked                      EveryServiceStatus @default(AVAILABLE)
  isFavorite                    Boolean            @default(false)
  hotelReviewCount              Int                @default(0)
  createdAt                     DateTime           @default(now())
  updatedAt                     DateTime           @updatedAt

  // relationships
  hotelId        String?         @db.ObjectId
  hotel          Hotel?          @relation(fields: [hotelId], references: [id])
  user           User?           @relation(fields: [partnerId], references: [id])
  partnerId      String?         @db.ObjectId
  hotel_bookings Hotel_Booking[]
  review         Review[]
  favorite       Favorite[]

  @@map("rooms")
}

model Hotel_Booking {
  id                String        @id @default(auto()) @map("_id") @db.ObjectId
  checkoutSessionId String?
  rooms             Int
  adults            Int
  children          Int
  bookedFromDate    String
  bookedToDate      String
  totalPrice        Float
  specialRequest    String?
  bookingStatus     BookingStatus @default(PENDING)
  category          String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  // relationships
  partnerId String    @db.ObjectId
  hotel     Hotel     @relation(fields: [hotelId], references: [id])
  hotelId   String    @db.ObjectId
  user      User?     @relation(fields: [userId], references: [id])
  userId    String?   @db.ObjectId
  payment   Payment[]
  room      Room?     @relation(fields: [roomId], references: [id])
  roomId    String?   @db.ObjectId

  @@map("hotel_bookings")
}

model Security_Protocol {
  id                          String   @id @default(auto()) @map("_id") @db.ObjectId
  securityBusinessName        String   @unique
  securityName                String
  securityBusinessType        String
  securityRegNum              String
  securityRegDate             String
  securityPhone               String
  securityEmail               String
  businessLogo                String   @default("https://i.ibb.co/zWxSgQL8/download.png")
  securityTagline             String?
  securityProtocolDescription String?
  securityProtocolType        String
  securityBookingCondition    String
  securityCancelationPolicy   String
  securityDocs                String[] // 5 image
  hotelLate                   Float?
  hotelLong                   Float?
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt

  // relationships
  user             User               @relation(fields: [partnerId], references: [id])
  partnerId        String             @db.ObjectId
  security_Booking Security_Booking[]
  review           Review[]
  security_Guard   Security_Guard[]

  @@map("security_protocols")
}

model Security_Guard {
  id                       String             @id @default(auto()) @map("_id") @db.ObjectId
  securityGuardName        String
  securityAddress          String
  securityPostalCode       String
  securityDistrict         String
  securityCity             String
  securityCountry          String
  securityGuardDescription String
  securityImages           String[] // 10 image
  securityServicesOffered  String[]
  experience               Int
  availability             String
  languages                String[]
  certification            String
  securityRating           String
  securityPriceDay         Float
  category                 String?
  discount                 Float?
  isBooked                 EveryServiceStatus @default(AVAILABLE)
  hiredCount               Int                @default(0)
  vat                      Float              @default(0)
  securityReviewCount      Int                @default(0)
  securityBookingAbleDays  String[]
  createdAt                DateTime           @default(now())
  updatedAt                DateTime           @updatedAt

  // relationships
  partnerId        String?            @db.ObjectId
  user             User?              @relation(fields: [partnerId], references: [id])
  securityId       String?            @db.ObjectId
  security         Security_Protocol? @relation(fields: [securityId], references: [id])
  security_Booking Security_Booking[]
  review           Review[]

  @@map("security_guards")
}

model Security_Booking {
  id                     String        @id @default(auto()) @map("_id") @db.ObjectId
  checkoutSessionId      String?
  number_of_security     Int
  securityBookedFromDate String
  securityBookedToDate   String
  totalPrice             Float
  bookingStatus          BookingStatus @default(PENDING)
  category               String
  createdAt              DateTime      @default(now())
  updatedAt              DateTime      @updatedAt

  // relationships
  partnerId        String             @db.ObjectId
  security         Security_Protocol? @relation(fields: [securityId], references: [id])
  securityId       String?            @db.ObjectId
  user             User?              @relation(fields: [userId], references: [id])
  userId           String?            @db.ObjectId
  payment          Payment[]
  security_Guard   Security_Guard?    @relation(fields: [security_GuardId], references: [id])
  security_GuardId String?            @db.ObjectId

  @@map("security_bookings")
}

model Car_Rental {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  carBusinessName      String   @unique
  carName              String
  carBusinessType      String
  carRegNum            String
  carRegDate           String
  carPhone             String
  carEmail             String
  businessLogo         String   @default("https://i.ibb.co/zWxSgQL8/download.png")
  carTagline           String?
  carRentalDescription String?
  carBookingCondition  String
  carCancelationPolicy String
  carDocs              String[] // 5 image
  carLate              Float?
  carLong              Float?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // relationships
  user        User          @relation(fields: [partnerId], references: [id])
  partnerId   String        @db.ObjectId
  car_Booking Car_Booking[]
  review      Review[]
  car         Car[]

  @@map("car_rentals")
}

model Car {
  id                 String             @id @default(auto()) @map("_id") @db.ObjectId
  carAddress         String
  carPostalCode      String
  carDistrict        String
  carCity            String
  carCountry         String
  carDescription     String
  carImages          String[] // 5 image
  carServicesOffered String[]
  carType            String
  carSeats           String
  carOilType         String // fuel type
  carEngineType      String
  carTransmission    String // transmission
  carPower           String
  carDrivetrain      String
  carMileage         String // mileage
  carModel           String
  carCapacity        String
  carColor           String
  fuelType           String
  gearType           String
  carRating          String
  carPriceDay        Float
  category           String?
  discount           Float?
  isBooked           EveryServiceStatus @default(AVAILABLE)
  vat                Float              @default(0)
  carReviewCount     Int                @default(0)
  carBookingAbleDays String[]
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt

  // relationships
  partnerId    String?       @db.ObjectId
  user         User?         @relation(fields: [partnerId], references: [id])
  car_Rental   Car_Rental?   @relation(fields: [car_RentalId], references: [id])
  car_RentalId String?       @db.ObjectId
  car_Booking  Car_Booking[]
  review       Review[]

  @@map("cars")
}

model PromoCode {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  code          String       @unique
  discountType  DiscountType @default(PERCENTAGE) // PERCENTAGE | FLAT
  discountValue Float

  validFrom     DateTime
  validTo       DateTime
  usageLimit    Int
  usedCount     Int      @default(0)
  perUserLimit  Int
  minimumAmount Float? // minimum order amount

  status PromoStatus @default(ACTIVE)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relationships
  carBookings Car_Booking[]

  @@map("promo_codes")
}

model Car_Booking {
  id                String        @id @default(auto()) @map("_id") @db.ObjectId
  checkoutSessionId String?
  carBookedFromDate String
  carBookedToDate   String
  promo_code        String?
  totalPrice        Float
  bookingStatus     BookingStatus @default(PENDING)
  category          String
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  // relationships
  partnerId    String      @db.ObjectId
  car_Rental   Car_Rental? @relation(fields: [car_RentalId], references: [id])
  car_RentalId String?     @db.ObjectId
  user         User?       @relation(fields: [userId], references: [id])
  userId       String?     @db.ObjectId
  promoCode    PromoCode?  @relation(fields: [promoCodeId], references: [id])
  promoCodeId  String?     @db.ObjectId
  payment      Payment[]
  car          Car?        @relation(fields: [carId], references: [id])
  carId        String?     @db.ObjectId

  @@map("car_bookings")
}

model Attraction {
  id                            String   @id @default(auto()) @map("_id") @db.ObjectId
  attractionBusinessName        String   @unique
  attractionName                String
  attractionBusinessType        String
  attractionRegNum              String
  attractionRegDate             String
  attractionPhone               String
  attractionEmail               String
  businessLogo                  String   @default("https://i.ibb.co/zWxSgQL8/download.png")
  attractionBusinessTagline     String
  attractionBusinessDescription String
  attractionBookingCondition    String
  attractionCancelationPolicy   String
  attractionDocs                String[] // 5 image
  hotelLate                     Float?
  hotelLong                     Float?
  createdAt                     DateTime @default(now())
  updatedAt                     DateTime @updatedAt

  // relationships
  user               User?                @relation(fields: [partnerId], references: [id])
  partnerId          String?              @db.ObjectId
  review             Review[]
  appeal             Appeal[]
  attraction_Booking Attraction_Booking[]

  @@map("attractions")
}

model Appeal {
  id                        String             @id @default(auto()) @map("_id") @db.ObjectId
  attractionDestinationType String
  attractionDescription     String
  attractionAddress         String
  attractionCity            String
  attractionPostalCode      String
  attractionDistrict        String
  attractionCountry         String
  attractionImages          String[] // 5 image
  attractionServicesOffered String[]
  attractionFreeWifi        Boolean
  attractionFreeParking     Boolean
  attractionKitchen         Boolean
  attractionTv              Boolean
  attractionAirConditioning Boolean
  attractionPool            Boolean
  attractionRating          String
  attractionAdultPrice      Float
  attractionChildPrice      Float
  category                  String?
  discount                  Float?
  isBooked                  EveryServiceStatus @default(AVAILABLE)
  vat                       Float              @default(0)
  attractionReviewCount     Int                @default(0)
  createdAt                 DateTime           @default(now())
  updatedAt                 DateTime           @updatedAt

  // relationships
  user               User?                @relation(fields: [partnerId], references: [id])
  partnerId          String?              @db.ObjectId
  attraction         Attraction?          @relation(fields: [attractionId], references: [id])
  attractionId       String?              @db.ObjectId
  attraction_Booking Attraction_Booking[]
  review             Review[]
  attractionSchedule AttractionSchedule[]
  scheduleSlot       ScheduleSlot[]

  @@map("appeals")
}

model AttractionSchedule {
  id  String @id @default(auto()) @map("_id") @db.ObjectId
  day String
  // date String

  // relationships
  appealId String?        @db.ObjectId
  appeal   Appeal?        @relation(fields: [appealId], references: [id])
  slots    ScheduleSlot[]

  @@map("attraction_schedules")
}

model ScheduleSlot {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  from String // "10:00:00"
  to   String // "12:00:00"

  // relationships
  appealId             String?             @db.ObjectId
  appeal               Appeal?             @relation(fields: [appealId], references: [id])
  attractionScheduleId String?             @db.ObjectId
  weeklySchedule       AttractionSchedule? @relation(fields: [attractionScheduleId], references: [id])

  @@map("schedule_slots")
}

model Attraction_Booking {
  id                String        @id @default(auto()) @map("_id") @db.ObjectId
  checkoutSessionId String?
  totalPrice        Float
  bookingStatus     BookingStatus @default(PENDING)
  adults            Int
  children          Int
  date              String
  day               String
  timeSlot          Json // { "from": "10:00:00", "to": "12:00:00" }
  category          String
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  // relationships
  partnerId    String      @db.ObjectId
  attractionId String?     @db.ObjectId
  attraction   Attraction? @relation(fields: [attractionId], references: [id])
  appealId     String?     @db.ObjectId
  appeal       Appeal?     @relation(fields: [appealId], references: [id])
  user         User?       @relation(fields: [userId], references: [id])
  userId       String?     @db.ObjectId
  payment      Payment[]

  @@map("attraction_bookings")
}

model Review {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  rating     Float
  subRatings Json?
  comment    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // relationships
  user             User               @relation(fields: [userId], references: [id])
  userId           String             @db.ObjectId
  security         Security_Protocol? @relation(fields: [securityId], references: [id])
  securityId       String?            @db.ObjectId
  car_Rental       Car_Rental?        @relation(fields: [car_RentalId], references: [id])
  car_RentalId     String?            @db.ObjectId
  attraction       Attraction?        @relation(fields: [attractionId], references: [id])
  attractionId     String?            @db.ObjectId
  room             Room?              @relation(fields: [roomId], references: [id])
  roomId           String?            @db.ObjectId
  security_Guard   Security_Guard?    @relation(fields: [security_GuardId], references: [id])
  security_GuardId String?            @db.ObjectId
  Car              Car?               @relation(fields: [carId], references: [id])
  carId            String?            @db.ObjectId
  appeal           Appeal?            @relation(fields: [appealId], references: [id])
  appealId         String?            @db.ObjectId

  @@map("reviews")
}

model Favorite {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  hotel     Hotel    @relation(fields: [hotelId], references: [id])
  hotelId   String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  room      Room?    @relation(fields: [roomId], references: [id])
  roomId    String?  @db.ObjectId

  @@unique([userId, roomId])
  @@map("favorites")
}

model Notifications {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  receiverId   String?  @db.ObjectId
  partnerId    String?  @db.ObjectId
  supportId    String?  @db.ObjectId
  title        String
  message      String?
  body         String
  serviceTypes String?
  bookingId    String?
  read         Boolean  @default(false)
  isClicked    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User?    @relation(fields: [receiverId], references: [id])

  @@map("notifications")
}

model Faq {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  question  String
  answer    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("faqs")
}

model CustomerContact {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  email       String
  phone       String
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("customer_contacts")
}

model Newsroom {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  tagline     String
  title       String
  summary     String
  category    String
  country     String
  image       String[]
  publishedAt DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  author      String?
  isPublished Boolean  @default(true)
}

model Human_Rights {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Cancel_Reservation {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Refund_Policy {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model About_App {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  appName       String
  description   String
  ourServices   String[]
  whyFasisty    String[]
  ourMission    String
  ourVision     String
  securityTrust String
  futurePlans   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("about_apps")
}

model Terms_Condition {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  title                 String
  acceptance_terms      String
  app_purpose           String
  user_responsibilities String
  data_usage            String
  intellectual_property String
  limitation            String
  updates               String
  contactUS             String
  adminId               String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("terms_conditions")
}

model Privacy_Policy {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  title                String
  introduction         String
  information_collect  String[]
  how_useYour_data     String[]
  data_security        String
  third_party_services String
  user_control         String[]
  children_privacy     String
  changes_to_policy    String
  contact_info         String
  adminId              String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("privacy_policies")
}

model Channel {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  channelName String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  //Relations
  person1Id String?   @db.ObjectId
  person1   User?     @relation("ChannelPerson1", fields: [person1Id], references: [id])
  person2Id String?   @db.ObjectId
  person2   User?     @relation("ChannelPerson2", fields: [person2Id], references: [id])
  messages  Message[]

  @@map("channels")
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  message   String?
  files     String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  senderId    String   @db.ObjectId
  sender      User     @relation("sentMessages", fields: [senderId], references: [id])
  channelName String
  Channel     Channel? @relation(fields: [channelName], references: [channelName])

  @@map("messages")
}

model Payment {
  id               String          @id @default(auto()) @map("_id") @db.ObjectId
  amount           Float
  description      String?
  currency         String?
  sessionId        String?         @unique
  paymentMethod    String?
  status           PaymentStatus
  // status           String
  provider         PaymentProvider
  payable_name     String?
  payable_email    String?
  payment_intent   String?
  country          String?
  admin_commission Float?
  service_fee      Float?
  paystack_fee     Float?
  vat_amount       Float? // 5% only for admin
  transactionId    String?
  serviceType      String // HOTEL | SECURITY | CAR | ATTRACTION
  partnerId        String          @db.ObjectId
  isDeleted        Boolean         @default(false)
  metadata         Json? // extra(fullName, email, contactNumber, country, description etc).

  // Relations
  user                 User                @relation(fields: [userId], references: [id])
  userId               String              @db.ObjectId
  hotel_booking        Hotel_Booking?      @relation(fields: [hotel_bookingId], references: [id])
  hotel_bookingId      String?             @db.ObjectId
  security_booking     Security_Booking?   @relation(fields: [security_bookingId], references: [id])
  security_bookingId   String?             @db.ObjectId
  car_booking          Car_Booking?        @relation(fields: [car_bookingId], references: [id])
  car_bookingId        String?             @db.ObjectId
  attraction_booking   Attraction_Booking? @relation(fields: [attraction_bookingId], references: [id])
  attraction_bookingId String?             @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("payments")
}

model Support {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  fullName      String?
  email         String?
  contactNumber String?
  subject       String
  description   String
  supportType   SupportType
  status        SupportStatus @default(Pending)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  user   User?   @relation(fields: [userId], references: [id])
  userId String? @db.ObjectId

  @@map("supports")
}
